// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String
  password           String
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @db.Timestamp(6)
  deleted_at         DateTime?            @db.Timestamp(6)
  is_active          Boolean              @default(false)
  transaction        Transaction[]
  bill               Bill[]
  transactionHistory TransactionHistory[]
  codeVerification   CodeVerification?
}

model Transaction {
  id                 Int                  @id @default(autoincrement())
  sender_user        User                 @relation(fields: [user_id], references: [id])
  user_id            Int
  description        String?
  value              Int
  category           String
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  made_in            DateTime             @db.Timestamp(6)
  updated_at         DateTime?            @db.Timestamp(6)
  deleted_at         DateTime?            @db.Timestamp(6)
  type               transaction_type
  transactionHistory TransactionHistory[]
}

model Bill {
  id                      Int        @id @default(autoincrement())
  user                    User       @relation(fields: [user_id], references: [id])
  user_id                 Int
  description             String
  amount                  Int
  due_date                DateTime   @db.Timestamp(6)
  created_at              DateTime   @default(now()) @db.Timestamp(6)
  updated_at              DateTime?  @db.Timestamp(6)
  deleted_at              DateTime?  @db.Timestamp(6)
  status                  bill_types @default(pending)
  already_notify_due_date Boolean?   @default(false)
  already_notify_1_day    Boolean?   @default(false)
}

model TransactionHistory {
  id               Int              @id @default(autoincrement())
  transferred_in   DateTime
  transaction      Transaction      @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  transaction_id   Int
  transaction_type transaction_type
  user             User             @relation(fields: [created_by], references: [id])
  created_by       Int
  updated_at       DateTime?        @db.Timestamp(6)
  deleted_at       DateTime?        @db.Timestamp(6)
}

model CodeVerification {
  id           Int       @id @default(autoincrement())
  user_id      Int       @unique
  created_for  User      @relation(fields: [user_id], references: [id])
  already_used Boolean   @default(false)
  code         String    @unique
  created_at   DateTime  @db.Timestamp(6)
  used_at      DateTime? @db.Timestamp(6)
  expire_date  DateTime  @db.Timestamp(6)
}

enum transaction_type {
  entry
  exit
}

enum bill_types {
  paid
  overdue
  pending
}
